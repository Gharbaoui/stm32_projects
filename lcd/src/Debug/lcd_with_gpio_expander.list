
lcd_with_gpio_expander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002594  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002758  08002758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002794  08002794  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002794  08002794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800279c  0800279c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800279c  0800279c  0001279c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080027a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000010  080027b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080027b4  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b94  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001656  00000000  00000000  00027c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  00029270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ce  00000000  00000000  00029a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020477  00000000  00000000  00029fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a29c  00000000  00000000  0004a44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4a65  00000000  00000000  000546e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e64  00000000  00000000  00119150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0011afb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002740 	.word	0x08002740

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08002740 	.word	0x08002740

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <transmit_wrapper>:
//    cnt = DWT->CYCCNT - start;
//  } while(cnt < cycles);
//}

void transmit_wrapper(uint8_t data)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af02      	add	r7, sp, #8
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDRESS, &data, 1, 100);
 800050a:	1dfa      	adds	r2, r7, #7
 800050c:	2364      	movs	r3, #100	; 0x64
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2301      	movs	r3, #1
 8000512:	214e      	movs	r1, #78	; 0x4e
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <transmit_wrapper+0x24>)
 8000516:	f000 ffb9 	bl	800148c <HAL_I2C_Master_Transmit>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	2000002c 	.word	0x2000002c

08000528 <write_data>:

void write_data(uint8_t data)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
//	transmit_wrapper(data);
//	HAL_Delay(1);
//	pulse_E_line(data);

	transmit_wrapper(data | ENABLE_PIN_ON); // setting E pin to high
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	b2db      	uxtb	r3, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff ffe0 	bl	8000500 <transmit_wrapper>
	HAL_Delay(1); // E line is high for 1ms which is enough
 8000540:	2001      	movs	r0, #1
 8000542:	f000 fb49 	bl	8000bd8 <HAL_Delay>
	transmit_wrapper(data & ENABLE_PIN_OFF);
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	f023 0304 	bic.w	r3, r3, #4
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ffd6 	bl	8000500 <transmit_wrapper>
	HAL_Delay(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f000 fb3f 	bl	8000bd8 <HAL_Delay>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <send_word>:
//	transmit_wrapper(data & ENABLE_PIN_OFF);
//	HAL_Delay(1);
//}

void send_word(uint8_t w, uint8_t rs)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	460a      	mov	r2, r1
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	4613      	mov	r3, r2
 8000572:	71bb      	strb	r3, [r7, #6]
	uint8_t high_part = w & 0xf0;
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f023 030f 	bic.w	r3, r3, #15
 800057a:	73fb      	strb	r3, [r7, #15]
	uint8_t low_part = (w << 4) & 0xf0;
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	011b      	lsls	r3, r3, #4
 8000580:	73bb      	strb	r3, [r7, #14]
	write_data(high_part | rs | backlight_state);
 8000582:	7bfa      	ldrb	r2, [r7, #15]
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	4313      	orrs	r3, r2
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <send_word+0x60>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4313      	orrs	r3, r2
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ffc8 	bl	8000528 <write_data>
	HAL_Delay(1);
 8000598:	2001      	movs	r0, #1
 800059a:	f000 fb1d 	bl	8000bd8 <HAL_Delay>
	write_data(low_part | rs | backlight_state);
 800059e:	7bba      	ldrb	r2, [r7, #14]
 80005a0:	79bb      	ldrb	r3, [r7, #6]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <send_word+0x60>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ffba 	bl	8000528 <write_data>
	HAL_Delay(1);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fb0f 	bl	8000bd8 <HAL_Delay>
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000000 	.word	0x20000000

080005c8 <lcd_config>:

	transmit_wrapper(backlight_state);
}

void lcd_config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	// function set with 2 lines and 5x10 dots for the font
	send_word(0b00011100, 0);
 80005cc:	2100      	movs	r1, #0
 80005ce:	201c      	movs	r0, #28
 80005d0:	f7ff ffc8 	bl	8000564 <send_word>
	// clear display
	send_word(0b00000001, 0);
 80005d4:	2100      	movs	r1, #0
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff ffc4 	bl	8000564 <send_word>
	// return home
	send_word(0b00000010, 0);
 80005dc:	2100      	movs	r1, #0
 80005de:	2002      	movs	r0, #2
 80005e0:	f7ff ffc0 	bl	8000564 <send_word>
	// display on/off control
	send_word(0b00001111, 0);
 80005e4:	2100      	movs	r1, #0
 80005e6:	200f      	movs	r0, #15
 80005e8:	f7ff ffbc 	bl	8000564 <send_word>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <set_cursor_to_line>:

void set_cursor_to_line(uint8_t line_number)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	// maybe a check later value should be 0 or 1 that's it
	if (line_number == 1)
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d104      	bne.n	800060a <set_cursor_to_line+0x1a>
		send_word(0b11000000, 0);
 8000600:	2100      	movs	r1, #0
 8000602:	20c0      	movs	r0, #192	; 0xc0
 8000604:	f7ff ffae 	bl	8000564 <send_word>
	else
		send_word(0b10000000, 0);
}
 8000608:	e003      	b.n	8000612 <set_cursor_to_line+0x22>
		send_word(0b10000000, 0);
 800060a:	2100      	movs	r1, #0
 800060c:	2080      	movs	r0, #128	; 0x80
 800060e:	f7ff ffa9 	bl	8000564 <send_word>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <send_char>:


void send_char(char c)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	4603      	mov	r3, r0
 8000622:	71fb      	strb	r3, [r7, #7]
	send_word((uint8_t)c, 1);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2101      	movs	r1, #1
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff9b 	bl	8000564 <send_word>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <send_string>:

void send_string(const char *str)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
	while (*str != 0)
 800063e:	e007      	b.n	8000650 <send_string+0x1a>
	{
		send_char(*str);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ffe8 	bl	800061a <send_char>
		++str;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3301      	adds	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
	while (*str != 0)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f3      	bne.n	8000640 <send_string+0xa>
	}
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fa44 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f820 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 f8ba 	bl	80007e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000674:	f000 f88a 	bl	800078c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_Delay(4000);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2120      	movs	r1, #32
 800067c:	4809      	ldr	r0, [pc, #36]	; (80006a4 <main+0x40>)
 800067e:	f000 fd75 	bl	800116c <HAL_GPIO_WritePin>
  lcd_config();
 8000682:	f7ff ffa1 	bl	80005c8 <lcd_config>
  send_string("ABCDEFGHERMNOPQL");
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <main+0x44>)
 8000688:	f7ff ffd5 	bl	8000636 <send_string>
//
  HAL_Delay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f000 faa2 	bl	8000bd8 <HAL_Delay>
  set_cursor_to_line(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff ffab 	bl	80005f0 <set_cursor_to_line>
  send_string("NEW STRING More");
 800069a:	4804      	ldr	r0, [pc, #16]	; (80006ac <main+0x48>)
 800069c:	f7ff ffcb 	bl	8000636 <send_string>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80006a0:	e7fe      	b.n	80006a0 <main+0x3c>
 80006a2:	bf00      	nop
 80006a4:	40020000 	.word	0x40020000
 80006a8:	08002758 	.word	0x08002758
 80006ac:	0800276c 	.word	0x0800276c

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2234      	movs	r2, #52	; 0x34
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 f812 	bl	80026e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <SystemClock_Config+0xd4>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a29      	ldr	r2, [pc, #164]	; (8000784 <SystemClock_Config+0xd4>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b27      	ldr	r3, [pc, #156]	; (8000784 <SystemClock_Config+0xd4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <SystemClock_Config+0xd8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <SystemClock_Config+0xd8>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemClock_Config+0xd8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000724:	2310      	movs	r3, #16
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000728:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800072c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072e:	2304      	movs	r3, #4
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fd34 	bl	80021ac <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800074a:	f000 f8ef 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2302      	movs	r3, #2
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	2102      	movs	r1, #2
 800076a:	4618      	mov	r0, r3
 800076c:	f001 f9e8 	bl	8001b40 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000776:	f000 f8d9 	bl	800092c <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f000 fd1b 	bl	8001204 <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f8aa 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000002c 	.word	0x2000002c
 80007e0:	40005400 	.word	0x40005400
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b39      	ldr	r3, [pc, #228]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a38      	ldr	r2, [pc, #224]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a31      	ldr	r2, [pc, #196]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <MX_GPIO_Init+0x100>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <MX_GPIO_Init+0x100>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a2a      	ldr	r2, [pc, #168]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <MX_GPIO_Init+0x100>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	481e      	ldr	r0, [pc, #120]	; (80008ec <MX_GPIO_Init+0x104>)
 8000874:	f000 fc7a 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4818      	ldr	r0, [pc, #96]	; (80008f0 <MX_GPIO_Init+0x108>)
 8000890:	f000 fad8 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000894:	230c      	movs	r3, #12
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a4:	2307      	movs	r3, #7
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	480f      	ldr	r0, [pc, #60]	; (80008ec <MX_GPIO_Init+0x104>)
 80008b0:	f000 fac8 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b4:	2320      	movs	r3, #32
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4808      	ldr	r0, [pc, #32]	; (80008ec <MX_GPIO_Init+0x104>)
 80008cc:	f000 faba 	bl	8000e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2028      	movs	r0, #40	; 0x28
 80008d6:	f000 fa7e 	bl	8000dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008da:	2028      	movs	r0, #40	; 0x28
 80008dc:	f000 fa97 	bl	8000e0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020800 	.word	0x40020800

080008f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
	// just for debugging
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008fe:	2120      	movs	r1, #32
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <HAL_GPIO_EXTI_Callback+0x30>)
 8000902:	f000 fc4c 	bl	800119e <HAL_GPIO_TogglePin>
	uint8_t data = 0b00001000;
 8000906:	2308      	movs	r3, #8
 8000908:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &data, 1, 10);
 800090a:	f107 020f 	add.w	r2, r7, #15
 800090e:	230a      	movs	r3, #10
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2301      	movs	r3, #1
 8000914:	214e      	movs	r1, #78	; 0x4e
 8000916:	4804      	ldr	r0, [pc, #16]	; (8000928 <HAL_GPIO_EXTI_Callback+0x34>)
 8000918:	f000 fdb8 	bl	800148c <HAL_I2C_Master_Transmit>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40020000 	.word	0x40020000
 8000928:	2000002c 	.word	0x2000002c

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <HAL_MspInit+0x4c>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000976:	2007      	movs	r0, #7
 8000978:	f000 fa22 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <HAL_I2C_MspInit+0x84>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12c      	bne.n	8000a04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_I2C_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_I2C_MspInit+0x88>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_I2C_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009cc:	2312      	movs	r3, #18
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d8:	2304      	movs	r3, #4
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480c      	ldr	r0, [pc, #48]	; (8000a14 <HAL_I2C_MspInit+0x8c>)
 80009e4:	f000 fa2e 	bl	8000e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_I2C_MspInit+0x88>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_I2C_MspInit+0x88>)
 80009f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_I2C_MspInit+0x88>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a64:	f000 f898 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a74:	f000 fbae 	bl	80011d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000aa4:	f7ff ffea 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ace:	f001 fe13 	bl	80026f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fdc7 	bl	8000664 <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ae4:	080027a4 	.word	0x080027a4
  ldr r2, =_sbss
 8000ae8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000aec:	20000084 	.word	0x20000084

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <HAL_Init+0x40>)
 8000afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_Init+0x40>)
 8000b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_Init+0x40>)
 8000b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f94f 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 f808 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff ff06 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023c00 	.word	0x40023c00

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x54>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x58>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f967 	bl	8000e2a <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00e      	b.n	8000b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d80a      	bhi.n	8000b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b74:	f000 f92f 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <HAL_InitTick+0x5c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000004 	.word	0x20000004
 8000b90:	2000000c 	.word	0x2000000c
 8000b94:	20000008 	.word	0x20000008

08000b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	2000000c 	.word	0x2000000c
 8000bbc:	20000080 	.word	0x20000080

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000080 	.word	0x20000080

08000bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be0:	f7ff ffee 	bl	8000bc0 <HAL_GetTick>
 8000be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bf0:	d005      	beq.n	8000bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_Delay+0x44>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bfe:	bf00      	nop
 8000c00:	f7ff ffde 	bl	8000bc0 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d8f7      	bhi.n	8000c00 <HAL_Delay+0x28>
  {
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000000c 	.word	0x2000000c

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da0:	f7ff ff8e 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff29 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff3e 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff8e 	bl	8000d14 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff31 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffa2 	bl	8000d7c <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	e165      	b.n	800112c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 8154 	bne.w	8001126 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d005      	beq.n	8000e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d130      	bne.n	8000ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	091b      	lsrs	r3, r3, #4
 8000ee2:	f003 0201 	and.w	r2, r3, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d017      	beq.n	8000f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d123      	bne.n	8000f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	69b9      	ldr	r1, [r7, #24]
 8000f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0203 	and.w	r2, r3, #3
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 80ae 	beq.w	8001126 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <HAL_GPIO_Init+0x300>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a5c      	ldr	r2, [pc, #368]	; (8001144 <HAL_GPIO_Init+0x300>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b5a      	ldr	r3, [pc, #360]	; (8001144 <HAL_GPIO_Init+0x300>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe6:	4a58      	ldr	r2, [pc, #352]	; (8001148 <HAL_GPIO_Init+0x304>)
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4f      	ldr	r2, [pc, #316]	; (800114c <HAL_GPIO_Init+0x308>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x21a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4e      	ldr	r2, [pc, #312]	; (8001150 <HAL_GPIO_Init+0x30c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x216>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4d      	ldr	r2, [pc, #308]	; (8001154 <HAL_GPIO_Init+0x310>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x212>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4c      	ldr	r2, [pc, #304]	; (8001158 <HAL_GPIO_Init+0x314>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x20e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4b      	ldr	r2, [pc, #300]	; (800115c <HAL_GPIO_Init+0x318>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x20a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4a      	ldr	r2, [pc, #296]	; (8001160 <HAL_GPIO_Init+0x31c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x206>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a49      	ldr	r2, [pc, #292]	; (8001164 <HAL_GPIO_Init+0x320>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x202>
 8001042:	2306      	movs	r3, #6
 8001044:	e00c      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 8001046:	2307      	movs	r3, #7
 8001048:	e00a      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800104a:	2305      	movs	r3, #5
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800104e:	2304      	movs	r3, #4
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800105e:	2300      	movs	r3, #0
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001070:	4935      	ldr	r1, [pc, #212]	; (8001148 <HAL_GPIO_Init+0x304>)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107e:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <HAL_GPIO_Init+0x324>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a2:	4a31      	ldr	r2, [pc, #196]	; (8001168 <HAL_GPIO_Init+0x324>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <HAL_GPIO_Init+0x324>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010cc:	4a26      	ldr	r2, [pc, #152]	; (8001168 <HAL_GPIO_Init+0x324>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <HAL_GPIO_Init+0x324>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f6:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <HAL_GPIO_Init+0x324>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HAL_GPIO_Init+0x324>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001120:	4a11      	ldr	r2, [pc, #68]	; (8001168 <HAL_GPIO_Init+0x324>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3301      	adds	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2b0f      	cmp	r3, #15
 8001130:	f67f ae96 	bls.w	8000e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40013800 	.word	0x40013800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40021000 	.word	0x40021000
 8001160:	40021400 	.word	0x40021400
 8001164:	40021800 	.word	0x40021800
 8001168:	40013c00 	.word	0x40013c00

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001188:	e003      	b.n	8001192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	619a      	str	r2, [r3, #24]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b0:	887a      	ldrh	r2, [r7, #2]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	041a      	lsls	r2, r3, #16
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	400b      	ands	r3, r1
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fb7e 	bl	80008f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e12b      	b.n	800146e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fbac 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2224      	movs	r2, #36	; 0x24
 8001234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001256:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001266:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001268:	f000 fd5c 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 800126c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4a81      	ldr	r2, [pc, #516]	; (8001478 <HAL_I2C_Init+0x274>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d807      	bhi.n	8001288 <HAL_I2C_Init+0x84>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4a80      	ldr	r2, [pc, #512]	; (800147c <HAL_I2C_Init+0x278>)
 800127c:	4293      	cmp	r3, r2
 800127e:	bf94      	ite	ls
 8001280:	2301      	movls	r3, #1
 8001282:	2300      	movhi	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	e006      	b.n	8001296 <HAL_I2C_Init+0x92>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4a7d      	ldr	r2, [pc, #500]	; (8001480 <HAL_I2C_Init+0x27c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	bf94      	ite	ls
 8001290:	2301      	movls	r3, #1
 8001292:	2300      	movhi	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e0e7      	b.n	800146e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4a78      	ldr	r2, [pc, #480]	; (8001484 <HAL_I2C_Init+0x280>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	0c9b      	lsrs	r3, r3, #18
 80012a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a6a      	ldr	r2, [pc, #424]	; (8001478 <HAL_I2C_Init+0x274>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d802      	bhi.n	80012d8 <HAL_I2C_Init+0xd4>
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3301      	adds	r3, #1
 80012d6:	e009      	b.n	80012ec <HAL_I2C_Init+0xe8>
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	4a69      	ldr	r2, [pc, #420]	; (8001488 <HAL_I2C_Init+0x284>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	099b      	lsrs	r3, r3, #6
 80012ea:	3301      	adds	r3, #1
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	430b      	orrs	r3, r1
 80012f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	495c      	ldr	r1, [pc, #368]	; (8001478 <HAL_I2C_Init+0x274>)
 8001308:	428b      	cmp	r3, r1
 800130a:	d819      	bhi.n	8001340 <HAL_I2C_Init+0x13c>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1e59      	subs	r1, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fbb1 f3f3 	udiv	r3, r1, r3
 800131a:	1c59      	adds	r1, r3, #1
 800131c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001320:	400b      	ands	r3, r1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00a      	beq.n	800133c <HAL_I2C_Init+0x138>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1e59      	subs	r1, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fbb1 f3f3 	udiv	r3, r1, r3
 8001334:	3301      	adds	r3, #1
 8001336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133a:	e051      	b.n	80013e0 <HAL_I2C_Init+0x1dc>
 800133c:	2304      	movs	r3, #4
 800133e:	e04f      	b.n	80013e0 <HAL_I2C_Init+0x1dc>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d111      	bne.n	800136c <HAL_I2C_Init+0x168>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1e58      	subs	r0, r3, #1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	440b      	add	r3, r1
 8001356:	fbb0 f3f3 	udiv	r3, r0, r3
 800135a:	3301      	adds	r3, #1
 800135c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	e012      	b.n	8001392 <HAL_I2C_Init+0x18e>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1e58      	subs	r0, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	0099      	lsls	r1, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001382:	3301      	adds	r3, #1
 8001384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_I2C_Init+0x196>
 8001396:	2301      	movs	r3, #1
 8001398:	e022      	b.n	80013e0 <HAL_I2C_Init+0x1dc>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10e      	bne.n	80013c0 <HAL_I2C_Init+0x1bc>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1e58      	subs	r0, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6859      	ldr	r1, [r3, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	440b      	add	r3, r1
 80013b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80013b4:	3301      	adds	r3, #1
 80013b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013be:	e00f      	b.n	80013e0 <HAL_I2C_Init+0x1dc>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1e58      	subs	r0, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6859      	ldr	r1, [r3, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	0099      	lsls	r1, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	6809      	ldr	r1, [r1, #0]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69da      	ldr	r2, [r3, #28]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800140e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6911      	ldr	r1, [r2, #16]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68d2      	ldr	r2, [r2, #12]
 800141a:	4311      	orrs	r1, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	430b      	orrs	r3, r1
 8001422:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2220      	movs	r2, #32
 800145a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	000186a0 	.word	0x000186a0
 800147c:	001e847f 	.word	0x001e847f
 8001480:	003d08ff 	.word	0x003d08ff
 8001484:	431bde83 	.word	0x431bde83
 8001488:	10624dd3 	.word	0x10624dd3

0800148c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af02      	add	r7, sp, #8
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	461a      	mov	r2, r3
 8001498:	460b      	mov	r3, r1
 800149a:	817b      	strh	r3, [r7, #10]
 800149c:	4613      	mov	r3, r2
 800149e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff fb8e 	bl	8000bc0 <HAL_GetTick>
 80014a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	f040 80e0 	bne.w	8001674 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2319      	movs	r3, #25
 80014ba:	2201      	movs	r2, #1
 80014bc:	4970      	ldr	r1, [pc, #448]	; (8001680 <HAL_I2C_Master_Transmit+0x1f4>)
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 f964 	bl	800178c <I2C_WaitOnFlagUntilTimeout>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014ca:	2302      	movs	r3, #2
 80014cc:	e0d3      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_I2C_Master_Transmit+0x50>
 80014d8:	2302      	movs	r3, #2
 80014da:	e0cc      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d007      	beq.n	8001502 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0201 	orr.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001510:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2221      	movs	r2, #33	; 0x21
 8001516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2210      	movs	r2, #16
 800151e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	893a      	ldrh	r2, [r7, #8]
 8001532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4a50      	ldr	r2, [pc, #320]	; (8001684 <HAL_I2C_Master_Transmit+0x1f8>)
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001544:	8979      	ldrh	r1, [r7, #10]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f89c 	bl	8001688 <I2C_MasterRequestWrite>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e08d      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001570:	e066      	b.n	8001640 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	6a39      	ldr	r1, [r7, #32]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fa22 	bl	80019c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	2b04      	cmp	r3, #4
 8001588:	d107      	bne.n	800159a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e06b      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3b01      	subs	r3, #1
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d11b      	bne.n	8001614 <HAL_I2C_Master_Transmit+0x188>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d017      	beq.n	8001614 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	b29a      	uxth	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160c:	3b01      	subs	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	6a39      	ldr	r1, [r7, #32]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 fa19 	bl	8001a50 <I2C_WaitOnBTFFlagUntilTimeout>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00d      	beq.n	8001640 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	2b04      	cmp	r3, #4
 800162a:	d107      	bne.n	800163c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800163a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e01a      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	2b00      	cmp	r3, #0
 8001646:	d194      	bne.n	8001572 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2220      	movs	r2, #32
 800165c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e000      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001674:	2302      	movs	r3, #2
  }
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	00100002 	.word	0x00100002
 8001684:	ffff0000 	.word	0xffff0000

08001688 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	460b      	mov	r3, r1
 8001696:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d006      	beq.n	80016b2 <I2C_MasterRequestWrite+0x2a>
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d003      	beq.n	80016b2 <I2C_MasterRequestWrite+0x2a>
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80016b0:	d108      	bne.n	80016c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e00b      	b.n	80016dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	2b12      	cmp	r3, #18
 80016ca:	d107      	bne.n	80016dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 f84f 	bl	800178c <I2C_WaitOnFlagUntilTimeout>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00d      	beq.n	8001710 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001702:	d103      	bne.n	800170c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e035      	b.n	800177c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001718:	d108      	bne.n	800172c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800171a:	897b      	ldrh	r3, [r7, #10]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001728:	611a      	str	r2, [r3, #16]
 800172a:	e01b      	b.n	8001764 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800172c:	897b      	ldrh	r3, [r7, #10]
 800172e:	11db      	asrs	r3, r3, #7
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f003 0306 	and.w	r3, r3, #6
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f063 030f 	orn	r3, r3, #15
 800173c:	b2da      	uxtb	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	490e      	ldr	r1, [pc, #56]	; (8001784 <I2C_MasterRequestWrite+0xfc>)
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 f898 	bl	8001880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e010      	b.n	800177c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800175a:	897b      	ldrh	r3, [r7, #10]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	4907      	ldr	r1, [pc, #28]	; (8001788 <I2C_MasterRequestWrite+0x100>)
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 f888 	bl	8001880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	00010008 	.word	0x00010008
 8001788:	00010002 	.word	0x00010002

0800178c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	4613      	mov	r3, r2
 800179a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800179c:	e048      	b.n	8001830 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017a4:	d044      	beq.n	8001830 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017a6:	f7ff fa0b 	bl	8000bc0 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d302      	bcc.n	80017bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d139      	bne.n	8001830 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	0c1b      	lsrs	r3, r3, #16
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d10d      	bne.n	80017e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	43da      	mvns	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	4013      	ands	r3, r2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	e00c      	b.n	80017fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	43da      	mvns	r2, r3
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	4013      	ands	r3, r2
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d116      	bne.n	8001830 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2220      	movs	r2, #32
 800180c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f043 0220 	orr.w	r2, r3, #32
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e023      	b.n	8001878 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	0c1b      	lsrs	r3, r3, #16
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d10d      	bne.n	8001856 <I2C_WaitOnFlagUntilTimeout+0xca>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	43da      	mvns	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	4013      	ands	r3, r2
 8001846:	b29b      	uxth	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	e00c      	b.n	8001870 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	43da      	mvns	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	4013      	ands	r3, r2
 8001862:	b29b      	uxth	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	429a      	cmp	r2, r3
 8001874:	d093      	beq.n	800179e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800188e:	e071      	b.n	8001974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189e:	d123      	bne.n	80018e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2220      	movs	r2, #32
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f043 0204 	orr.w	r2, r3, #4
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e067      	b.n	80019b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018ee:	d041      	beq.n	8001974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f0:	f7ff f966 	bl	8000bc0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d302      	bcc.n	8001906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d136      	bne.n	8001974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	0c1b      	lsrs	r3, r3, #16
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d10c      	bne.n	800192a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4013      	ands	r3, r2
 800191c:	b29b      	uxth	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf14      	ite	ne
 8001922:	2301      	movne	r3, #1
 8001924:	2300      	moveq	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	e00b      	b.n	8001942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	43da      	mvns	r2, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	4013      	ands	r3, r2
 8001936:	b29b      	uxth	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf14      	ite	ne
 800193c:	2301      	movne	r3, #1
 800193e:	2300      	moveq	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d016      	beq.n	8001974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f043 0220 	orr.w	r2, r3, #32
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e021      	b.n	80019b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	0c1b      	lsrs	r3, r3, #16
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d10c      	bne.n	8001998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	43da      	mvns	r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	4013      	ands	r3, r2
 800198a:	b29b      	uxth	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf14      	ite	ne
 8001990:	2301      	movne	r3, #1
 8001992:	2300      	moveq	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	e00b      	b.n	80019b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4013      	ands	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf14      	ite	ne
 80019aa:	2301      	movne	r3, #1
 80019ac:	2300      	moveq	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f47f af6d 	bne.w	8001890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019cc:	e034      	b.n	8001a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f886 	bl	8001ae0 <I2C_IsAcknowledgeFailed>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e034      	b.n	8001a48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019e4:	d028      	beq.n	8001a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e6:	f7ff f8eb 	bl	8000bc0 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d302      	bcc.n	80019fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d11d      	bne.n	8001a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a06:	2b80      	cmp	r3, #128	; 0x80
 8001a08:	d016      	beq.n	8001a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2220      	movs	r2, #32
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f043 0220 	orr.w	r2, r3, #32
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e007      	b.n	8001a48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a42:	2b80      	cmp	r3, #128	; 0x80
 8001a44:	d1c3      	bne.n	80019ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a5c:	e034      	b.n	8001ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f83e 	bl	8001ae0 <I2C_IsAcknowledgeFailed>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e034      	b.n	8001ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a74:	d028      	beq.n	8001ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a76:	f7ff f8a3 	bl	8000bc0 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d302      	bcc.n	8001a8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d11d      	bne.n	8001ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d016      	beq.n	8001ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f043 0220 	orr.w	r2, r3, #32
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e007      	b.n	8001ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d1c3      	bne.n	8001a5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af6:	d11b      	bne.n	8001b30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f043 0204 	orr.w	r2, r3, #4
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0cc      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	4b68      	ldr	r3, [pc, #416]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d90c      	bls.n	8001b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b65      	ldr	r3, [pc, #404]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0b8      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d020      	beq.n	8001bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b94:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4a58      	ldr	r2, [pc, #352]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bac:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	494d      	ldr	r1, [pc, #308]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d044      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d119      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e07f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e06f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e067      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f023 0203 	bic.w	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4934      	ldr	r1, [pc, #208]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c30:	f7fe ffc6 	bl	8000bc0 <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7fe ffc2 	bl	8000bc0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e04f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 020c 	and.w	r2, r3, #12
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d1eb      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c60:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d20c      	bcs.n	8001c88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e032      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4916      	ldr	r1, [pc, #88]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	490e      	ldr	r1, [pc, #56]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc6:	f000 f841 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	490a      	ldr	r1, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	5ccb      	ldrb	r3, [r1, r3]
 8001cda:	fa22 f303 	lsr.w	r3, r2, r3
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe ff26 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	0800277c 	.word	0x0800277c
 8001d04:	20000004 	.word	0x20000004
 8001d08:	20000008 	.word	0x20000008

08001d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000004 	.word	0x20000004

08001d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d28:	f7ff fff0 	bl	8001d0c <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0a9b      	lsrs	r3, r3, #10
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4903      	ldr	r1, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	0800278c 	.word	0x0800278c

08001d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d50:	b0ae      	sub	sp, #184	; 0xb8
 8001d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d72:	4bcb      	ldr	r3, [pc, #812]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	f200 8206 	bhi.w	800218c <HAL_RCC_GetSysClockFreq+0x440>
 8001d80:	a201      	add	r2, pc, #4	; (adr r2, 8001d88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d86:	bf00      	nop
 8001d88:	08001dbd 	.word	0x08001dbd
 8001d8c:	0800218d 	.word	0x0800218d
 8001d90:	0800218d 	.word	0x0800218d
 8001d94:	0800218d 	.word	0x0800218d
 8001d98:	08001dc5 	.word	0x08001dc5
 8001d9c:	0800218d 	.word	0x0800218d
 8001da0:	0800218d 	.word	0x0800218d
 8001da4:	0800218d 	.word	0x0800218d
 8001da8:	08001dcd 	.word	0x08001dcd
 8001dac:	0800218d 	.word	0x0800218d
 8001db0:	0800218d 	.word	0x0800218d
 8001db4:	0800218d 	.word	0x0800218d
 8001db8:	08001fbd 	.word	0x08001fbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dbc:	4bb9      	ldr	r3, [pc, #740]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001dc2:	e1e7      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dc4:	4bb8      	ldr	r3, [pc, #736]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dca:	e1e3      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dcc:	4bb4      	ldr	r3, [pc, #720]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd8:	4bb1      	ldr	r3, [pc, #708]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d071      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de4:	4bae      	ldr	r3, [pc, #696]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	2200      	movs	r2, #0
 8001dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001df0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e0a:	4622      	mov	r2, r4
 8001e0c:	462b      	mov	r3, r5
 8001e0e:	f04f 0000 	mov.w	r0, #0
 8001e12:	f04f 0100 	mov.w	r1, #0
 8001e16:	0159      	lsls	r1, r3, #5
 8001e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e1c:	0150      	lsls	r0, r2, #5
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4621      	mov	r1, r4
 8001e24:	1a51      	subs	r1, r2, r1
 8001e26:	6439      	str	r1, [r7, #64]	; 0x40
 8001e28:	4629      	mov	r1, r5
 8001e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001e3c:	4649      	mov	r1, r9
 8001e3e:	018b      	lsls	r3, r1, #6
 8001e40:	4641      	mov	r1, r8
 8001e42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e46:	4641      	mov	r1, r8
 8001e48:	018a      	lsls	r2, r1, #6
 8001e4a:	4641      	mov	r1, r8
 8001e4c:	1a51      	subs	r1, r2, r1
 8001e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e50:	4649      	mov	r1, r9
 8001e52:	eb63 0301 	sbc.w	r3, r3, r1
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001e64:	4649      	mov	r1, r9
 8001e66:	00cb      	lsls	r3, r1, #3
 8001e68:	4641      	mov	r1, r8
 8001e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e6e:	4641      	mov	r1, r8
 8001e70:	00ca      	lsls	r2, r1, #3
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	4603      	mov	r3, r0
 8001e78:	4622      	mov	r2, r4
 8001e7a:	189b      	adds	r3, r3, r2
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e7e:	462b      	mov	r3, r5
 8001e80:	460a      	mov	r2, r1
 8001e82:	eb42 0303 	adc.w	r3, r2, r3
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e94:	4629      	mov	r1, r5
 8001e96:	024b      	lsls	r3, r1, #9
 8001e98:	4621      	mov	r1, r4
 8001e9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	024a      	lsls	r2, r1, #9
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001eb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001eb4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001eb8:	f7fe f9a4 	bl	8000204 <__aeabi_uldivmod>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ec6:	e067      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ec8:	4b75      	ldr	r3, [pc, #468]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	099b      	lsrs	r3, r3, #6
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ed4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ee6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001eea:	4622      	mov	r2, r4
 8001eec:	462b      	mov	r3, r5
 8001eee:	f04f 0000 	mov.w	r0, #0
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	0159      	lsls	r1, r3, #5
 8001ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001efc:	0150      	lsls	r0, r2, #5
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4621      	mov	r1, r4
 8001f04:	1a51      	subs	r1, r2, r1
 8001f06:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f08:	4629      	mov	r1, r5
 8001f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	018b      	lsls	r3, r1, #6
 8001f20:	4641      	mov	r1, r8
 8001f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f26:	4641      	mov	r1, r8
 8001f28:	018a      	lsls	r2, r1, #6
 8001f2a:	4641      	mov	r1, r8
 8001f2c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f30:	4649      	mov	r1, r9
 8001f32:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f42:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f4a:	4692      	mov	sl, r2
 8001f4c:	469b      	mov	fp, r3
 8001f4e:	4623      	mov	r3, r4
 8001f50:	eb1a 0303 	adds.w	r3, sl, r3
 8001f54:	623b      	str	r3, [r7, #32]
 8001f56:	462b      	mov	r3, r5
 8001f58:	eb4b 0303 	adc.w	r3, fp, r3
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	028b      	lsls	r3, r1, #10
 8001f6e:	4621      	mov	r1, r4
 8001f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f74:	4621      	mov	r1, r4
 8001f76:	028a      	lsls	r2, r1, #10
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f80:	2200      	movs	r2, #0
 8001f82:	673b      	str	r3, [r7, #112]	; 0x70
 8001f84:	677a      	str	r2, [r7, #116]	; 0x74
 8001f86:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f8a:	f7fe f93b 	bl	8000204 <__aeabi_uldivmod>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4613      	mov	r3, r2
 8001f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f98:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001fba:	e0eb      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d06b      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	2200      	movs	r2, #0
 8001fdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001fe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe6:	663b      	str	r3, [r7, #96]	; 0x60
 8001fe8:	2300      	movs	r3, #0
 8001fea:	667b      	str	r3, [r7, #100]	; 0x64
 8001fec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001ff0:	4622      	mov	r2, r4
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	f04f 0000 	mov.w	r0, #0
 8001ff8:	f04f 0100 	mov.w	r1, #0
 8001ffc:	0159      	lsls	r1, r3, #5
 8001ffe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002002:	0150      	lsls	r0, r2, #5
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4621      	mov	r1, r4
 800200a:	1a51      	subs	r1, r2, r1
 800200c:	61b9      	str	r1, [r7, #24]
 800200e:	4629      	mov	r1, r5
 8002010:	eb63 0301 	sbc.w	r3, r3, r1
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002022:	4659      	mov	r1, fp
 8002024:	018b      	lsls	r3, r1, #6
 8002026:	4651      	mov	r1, sl
 8002028:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800202c:	4651      	mov	r1, sl
 800202e:	018a      	lsls	r2, r1, #6
 8002030:	4651      	mov	r1, sl
 8002032:	ebb2 0801 	subs.w	r8, r2, r1
 8002036:	4659      	mov	r1, fp
 8002038:	eb63 0901 	sbc.w	r9, r3, r1
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002048:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800204c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002050:	4690      	mov	r8, r2
 8002052:	4699      	mov	r9, r3
 8002054:	4623      	mov	r3, r4
 8002056:	eb18 0303 	adds.w	r3, r8, r3
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	462b      	mov	r3, r5
 800205e:	eb49 0303 	adc.w	r3, r9, r3
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002070:	4629      	mov	r1, r5
 8002072:	024b      	lsls	r3, r1, #9
 8002074:	4621      	mov	r1, r4
 8002076:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800207a:	4621      	mov	r1, r4
 800207c:	024a      	lsls	r2, r1, #9
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002086:	2200      	movs	r2, #0
 8002088:	65bb      	str	r3, [r7, #88]	; 0x58
 800208a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800208c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002090:	f7fe f8b8 	bl	8000204 <__aeabi_uldivmod>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4613      	mov	r3, r2
 800209a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800209e:	e065      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x420>
 80020a0:	40023800 	.word	0x40023800
 80020a4:	00f42400 	.word	0x00f42400
 80020a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ac:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	099b      	lsrs	r3, r3, #6
 80020b2:	2200      	movs	r2, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	4611      	mov	r1, r2
 80020b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020bc:	653b      	str	r3, [r7, #80]	; 0x50
 80020be:	2300      	movs	r3, #0
 80020c0:	657b      	str	r3, [r7, #84]	; 0x54
 80020c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80020c6:	4642      	mov	r2, r8
 80020c8:	464b      	mov	r3, r9
 80020ca:	f04f 0000 	mov.w	r0, #0
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	0159      	lsls	r1, r3, #5
 80020d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d8:	0150      	lsls	r0, r2, #5
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4641      	mov	r1, r8
 80020e0:	1a51      	subs	r1, r2, r1
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	4649      	mov	r1, r9
 80020e6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80020f8:	4659      	mov	r1, fp
 80020fa:	018b      	lsls	r3, r1, #6
 80020fc:	4651      	mov	r1, sl
 80020fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002102:	4651      	mov	r1, sl
 8002104:	018a      	lsls	r2, r1, #6
 8002106:	4651      	mov	r1, sl
 8002108:	1a54      	subs	r4, r2, r1
 800210a:	4659      	mov	r1, fp
 800210c:	eb63 0501 	sbc.w	r5, r3, r1
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	00eb      	lsls	r3, r5, #3
 800211a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800211e:	00e2      	lsls	r2, r4, #3
 8002120:	4614      	mov	r4, r2
 8002122:	461d      	mov	r5, r3
 8002124:	4643      	mov	r3, r8
 8002126:	18e3      	adds	r3, r4, r3
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	464b      	mov	r3, r9
 800212c:	eb45 0303 	adc.w	r3, r5, r3
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800213e:	4629      	mov	r1, r5
 8002140:	028b      	lsls	r3, r1, #10
 8002142:	4621      	mov	r1, r4
 8002144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002148:	4621      	mov	r1, r4
 800214a:	028a      	lsls	r2, r1, #10
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002154:	2200      	movs	r2, #0
 8002156:	64bb      	str	r3, [r7, #72]	; 0x48
 8002158:	64fa      	str	r2, [r7, #76]	; 0x4c
 800215a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800215e:	f7fe f851 	bl	8000204 <__aeabi_uldivmod>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4613      	mov	r3, r2
 8002168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	0f1b      	lsrs	r3, r3, #28
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800217a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800217e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800218a:	e003      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800218e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002192:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002194:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002198:	4618      	mov	r0, r3
 800219a:	37b8      	adds	r7, #184	; 0xb8
 800219c:	46bd      	mov	sp, r7
 800219e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	00f42400 	.word	0x00f42400

080021ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e28d      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8083 	beq.w	80022d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021cc:	4b94      	ldr	r3, [pc, #592]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d019      	beq.n	800220c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021d8:	4b91      	ldr	r3, [pc, #580]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021e4:	4b8e      	ldr	r3, [pc, #568]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021f0:	d00c      	beq.n	800220c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f2:	4b8b      	ldr	r3, [pc, #556]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d112      	bne.n	8002224 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fe:	4b88      	ldr	r3, [pc, #544]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800220a:	d10b      	bne.n	8002224 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	4b84      	ldr	r3, [pc, #528]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d05b      	beq.n	80022d0 <HAL_RCC_OscConfig+0x124>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d157      	bne.n	80022d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e25a      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d106      	bne.n	800223c <HAL_RCC_OscConfig+0x90>
 800222e:	4b7c      	ldr	r3, [pc, #496]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7b      	ldr	r2, [pc, #492]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e01d      	b.n	8002278 <HAL_RCC_OscConfig+0xcc>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0xb4>
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a75      	ldr	r2, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b73      	ldr	r3, [pc, #460]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a72      	ldr	r2, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0xcc>
 8002260:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a6e      	ldr	r2, [pc, #440]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b6c      	ldr	r3, [pc, #432]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a6b      	ldr	r2, [pc, #428]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe fc9e 	bl	8000bc0 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002288:	f7fe fc9a 	bl	8000bc0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e21f      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b61      	ldr	r3, [pc, #388]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0xdc>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fc8a 	bl	8000bc0 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe fc86 	bl	8000bc0 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e20b      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	4b57      	ldr	r3, [pc, #348]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x104>
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d06f      	beq.n	80023be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d017      	beq.n	800231a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022ea:	4b4d      	ldr	r3, [pc, #308]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d105      	bne.n	8002302 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022f6:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002302:	4b47      	ldr	r3, [pc, #284]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800230a:	2b0c      	cmp	r3, #12
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230e:	4b44      	ldr	r3, [pc, #272]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x186>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1d3      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4937      	ldr	r1, [pc, #220]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b34      	ldr	r3, [pc, #208]	; (8002424 <HAL_RCC_OscConfig+0x278>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fc33 	bl	8000bc0 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235e:	f7fe fc2f 	bl	8000bc0 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1b4      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b28      	ldr	r3, [pc, #160]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4925      	ldr	r1, [pc, #148]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_RCC_OscConfig+0x278>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe fc12 	bl	8000bc0 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a0:	f7fe fc0e 	bl	8000bc0 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e193      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d036      	beq.n	8002438 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7fe fbf2 	bl	8000bc0 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe fbee 	bl	8000bc0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e173      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80023f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x234>
 80023fe:	e01b      	b.n	8002438 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002406:	f7fe fbdb 	bl	8000bc0 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	e00e      	b.n	800242c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240e:	f7fe fbd7 	bl	8000bc0 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d907      	bls.n	800242c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e15c      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
 8002420:	40023800 	.word	0x40023800
 8002424:	42470000 	.word	0x42470000
 8002428:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	4b8a      	ldr	r3, [pc, #552]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 800242e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1ea      	bne.n	800240e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 8097 	beq.w	8002574 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244a:	4b83      	ldr	r3, [pc, #524]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10f      	bne.n	8002476 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	4b7f      	ldr	r3, [pc, #508]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a7e      	ldr	r2, [pc, #504]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b7c      	ldr	r3, [pc, #496]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b79      	ldr	r3, [pc, #484]	; (800265c <HAL_RCC_OscConfig+0x4b0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	4b76      	ldr	r3, [pc, #472]	; (800265c <HAL_RCC_OscConfig+0x4b0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a75      	ldr	r2, [pc, #468]	; (800265c <HAL_RCC_OscConfig+0x4b0>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7fe fb97 	bl	8000bc0 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7fe fb93 	bl	8000bc0 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e118      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b6c      	ldr	r3, [pc, #432]	; (800265c <HAL_RCC_OscConfig+0x4b0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x31e>
 80024bc:	4b66      	ldr	r3, [pc, #408]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c0:	4a65      	ldr	r2, [pc, #404]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6713      	str	r3, [r2, #112]	; 0x70
 80024c8:	e01c      	b.n	8002504 <HAL_RCC_OscConfig+0x358>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x340>
 80024d2:	4b61      	ldr	r3, [pc, #388]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a60      	ldr	r2, [pc, #384]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
 80024de:	4b5e      	ldr	r3, [pc, #376]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	4a5d      	ldr	r2, [pc, #372]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0x358>
 80024ec:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	4a59      	ldr	r2, [pc, #356]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	6713      	str	r3, [r2, #112]	; 0x70
 80024f8:	4b57      	ldr	r3, [pc, #348]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	4a56      	ldr	r2, [pc, #344]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 80024fe:	f023 0304 	bic.w	r3, r3, #4
 8002502:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d015      	beq.n	8002538 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7fe fb58 	bl	8000bc0 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002512:	e00a      	b.n	800252a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fb54 	bl	8000bc0 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e0d7      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252a:	4b4b      	ldr	r3, [pc, #300]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0ee      	beq.n	8002514 <HAL_RCC_OscConfig+0x368>
 8002536:	e014      	b.n	8002562 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7fe fb42 	bl	8000bc0 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253e:	e00a      	b.n	8002556 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002540:	f7fe fb3e 	bl	8000bc0 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	; 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e0c1      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002556:	4b40      	ldr	r3, [pc, #256]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ee      	bne.n	8002540 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002568:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4a3a      	ldr	r2, [pc, #232]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 800256e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002572:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80ad 	beq.w	80026d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b08      	cmp	r3, #8
 8002588:	d060      	beq.n	800264c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d145      	bne.n	800261e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b33      	ldr	r3, [pc, #204]	; (8002660 <HAL_RCC_OscConfig+0x4b4>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fb12 	bl	8000bc0 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe fb0e 	bl	8000bc0 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e093      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	4b29      	ldr	r3, [pc, #164]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	019b      	lsls	r3, r3, #6
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	3b01      	subs	r3, #1
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	071b      	lsls	r3, r3, #28
 80025ea:	491b      	ldr	r1, [pc, #108]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x4b4>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe fae3 	bl	8000bc0 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fe:	f7fe fadf 	bl	8000bc0 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e064      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x452>
 800261c:	e05c      	b.n	80026d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_RCC_OscConfig+0x4b4>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe facc 	bl	8000bc0 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fac8 	bl	8000bc0 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e04d      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCC_OscConfig+0x4ac>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x480>
 800264a:	e045      	b.n	80026d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d107      	bne.n	8002664 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e040      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
 8002658:	40023800 	.word	0x40023800
 800265c:	40007000 	.word	0x40007000
 8002660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002664:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_RCC_OscConfig+0x538>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d030      	beq.n	80026d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d129      	bne.n	80026d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d122      	bne.n	80026d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002694:	4013      	ands	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800269a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800269c:	4293      	cmp	r3, r2
 800269e:	d119      	bne.n	80026d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	3b01      	subs	r3, #1
 80026ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d10f      	bne.n	80026d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800

080026e8 <memset>:
 80026e8:	4402      	add	r2, r0
 80026ea:	4603      	mov	r3, r0
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d100      	bne.n	80026f2 <memset+0xa>
 80026f0:	4770      	bx	lr
 80026f2:	f803 1b01 	strb.w	r1, [r3], #1
 80026f6:	e7f9      	b.n	80026ec <memset+0x4>

080026f8 <__libc_init_array>:
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4d0d      	ldr	r5, [pc, #52]	; (8002730 <__libc_init_array+0x38>)
 80026fc:	4c0d      	ldr	r4, [pc, #52]	; (8002734 <__libc_init_array+0x3c>)
 80026fe:	1b64      	subs	r4, r4, r5
 8002700:	10a4      	asrs	r4, r4, #2
 8002702:	2600      	movs	r6, #0
 8002704:	42a6      	cmp	r6, r4
 8002706:	d109      	bne.n	800271c <__libc_init_array+0x24>
 8002708:	4d0b      	ldr	r5, [pc, #44]	; (8002738 <__libc_init_array+0x40>)
 800270a:	4c0c      	ldr	r4, [pc, #48]	; (800273c <__libc_init_array+0x44>)
 800270c:	f000 f818 	bl	8002740 <_init>
 8002710:	1b64      	subs	r4, r4, r5
 8002712:	10a4      	asrs	r4, r4, #2
 8002714:	2600      	movs	r6, #0
 8002716:	42a6      	cmp	r6, r4
 8002718:	d105      	bne.n	8002726 <__libc_init_array+0x2e>
 800271a:	bd70      	pop	{r4, r5, r6, pc}
 800271c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002720:	4798      	blx	r3
 8002722:	3601      	adds	r6, #1
 8002724:	e7ee      	b.n	8002704 <__libc_init_array+0xc>
 8002726:	f855 3b04 	ldr.w	r3, [r5], #4
 800272a:	4798      	blx	r3
 800272c:	3601      	adds	r6, #1
 800272e:	e7f2      	b.n	8002716 <__libc_init_array+0x1e>
 8002730:	0800279c 	.word	0x0800279c
 8002734:	0800279c 	.word	0x0800279c
 8002738:	0800279c 	.word	0x0800279c
 800273c:	080027a0 	.word	0x080027a0

08002740 <_init>:
 8002740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002742:	bf00      	nop
 8002744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002746:	bc08      	pop	{r3}
 8002748:	469e      	mov	lr, r3
 800274a:	4770      	bx	lr

0800274c <_fini>:
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	bf00      	nop
 8002750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002752:	bc08      	pop	{r3}
 8002754:	469e      	mov	lr, r3
 8002756:	4770      	bx	lr
